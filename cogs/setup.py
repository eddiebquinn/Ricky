import discord
from discord.ext import commands
import database


class Setup(commands.Cog):
    def __init__(self, client):
        print(f"initilised {__class__.__cog_name__} cog")
        self.client = client

        self.streak_roles = (
            ((130, 81, 245), "3rd year +", 1460),
            ((0, 118, 255), "2nd year", 730),
            ((2, 248, 255), "6th - 12th month", 365),
            ((0, 250, 175), "3rd-5th month", 150),
            ((8, 238, 0), "2nd month", 60),
            ((169, 255, 0), "3rd - 4th week", 30),
            ((255, 255, 0), "2nd week", 14),
            ((255, 165, 0), "4th - 7th day", 7),
            ((245, 80, 0), "2nd - 3rd day", 3),
            ((255, 0, 0), "1st day", 1)
        )

    @commands.command(name="Setup_roles")
    @commands.has_guild_permissions(manage_roles=True)
    @commands.cooldown(3, 300, commands.BucketType.user)
    async def build_roles(self, ctx, hoist: bool = False):
        """Crates default roles and adds them to the database"""
        await ctx.send("setting up roles, this may take some time")
        response = await self.create_roles(guild=ctx.guild, hoist=hoist)
        if response is False:
            await ctx.send("Role creation failed")
            return
        response = await self.roles_into_database(ctx.guild, response)
        if response is True:
            await ctx.send("Role creation succsessful")

    async def create_roles(self, guild, hoist: bool = False):
        """write this before merge"""
        bot_name = self.client.user.name

        spawned_roles = []
        for role in self.streak_roles:
            rgb = role[0]
            colour = discord.Color.from_rgb(rgb[0], rgb[1], rgb[2])
            try:
                new_role = await guild.create_role(
                    name=role[1], colour=colour, reason=f"Auto generated by {bot_name}")
                spawned_roles.append((role[2], new_role))
            except discord.Forbidden:
                await ctx.send("I do not have permission to create roles in this server")
                return False

        return spawned_roles

    async def roles_into_database(self, guild, roles):
        for role in roles:
            await database.DATABASE_CONN.insert_guild_roles(
                guild_id=guild.id,
                day_reach=role[0],
                role_id=role[1].id)
        return True


def setup(client):
    client.add_cog(Setup(client))
